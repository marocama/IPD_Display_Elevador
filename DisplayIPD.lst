;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/04/2020 10:20:19
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2A5F      	GOTO       607
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00C9      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00CA      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0804      	MOVF       FSR, 0
0x000C	0x00A0      	MOVWF      32
;interruption.h,1 :: 		void interrupt() {
;interruption.h,3 :: 		setColumn(currentColumn);                                                  // Apaga tudo e varre as colunas
0x000D	0x0823      	MOVF       _currentColumn, 0
0x000E	0x00CB      	MOVWF      FARG_setColumn_column
0x000F	0x01CC      	CLRF       FARG_setColumn_column+1
0x0010	0x21A2      	CALL       _setColumn
;interruption.h,4 :: 		printColumn(characterVetor[currentColumn-1]);                            // Imprime a coluna atual
0x0011	0x3001      	MOVLW      1
0x0012	0x0223      	SUBWF      _currentColumn, 0
0x0013	0x00F0      	MOVWF      R0
0x0014	0x01F1      	CLRF       R0+1
0x0015	0x1C03      	BTFSS      STATUS, 0
0x0016	0x03F1      	DECF       R0+1, 1
0x0017	0x0870      	MOVF       R0, 0
0x0018	0x3E24      	ADDLW      _characterVetor
0x0019	0x0084      	MOVWF      FSR
0x001A	0x0800      	MOVF       INDF, 0
0x001B	0x00CB      	MOVWF      FARG_printColumn_character
0x001C	0x2247      	CALL       _printColumn
;interruption.h,6 :: 		if(currentColumn >= 10) {                                                  // Verifica se chegou no final de uma varredura de colunas
0x001D	0x300A      	MOVLW      10
0x001E	0x0223      	SUBWF      _currentColumn, 0
0x001F	0x1C03      	BTFSS      STATUS, 0
0x0020	0x2827      	GOTO       L_interrupt47
;interruption.h,7 :: 		currentColumn   = 1;                                                  // Posiciona na primeira coluna novamente
0x0021	0x3001      	MOVLW      1
0x0022	0x00A3      	MOVWF      _currentColumn
;interruption.h,8 :: 		currentPosition = 1;                                                  // Posiciona no inicio do vetor a ser impresso
0x0023	0x3001      	MOVLW      1
0x0024	0x00A1      	MOVWF      _currentPosition
;interruption.h,9 :: 		counterPrint++;                                                       // Incrementa um contador de varreduras completas
0x0025	0x0AA2      	INCF       _counterPrint, 1
;interruption.h,10 :: 		} else {
0x0026	0x2829      	GOTO       L_interrupt48
L_interrupt47:
;interruption.h,11 :: 		currentColumn++;                                                      // Posiciona na proxima coluna
0x0027	0x0AA3      	INCF       _currentColumn, 1
;interruption.h,12 :: 		currentPosition++;                                                    // Avança na proxima posição do vetor a ser impresso
0x0028	0x0AA1      	INCF       _currentPosition, 1
;interruption.h,13 :: 		}
L_interrupt48:
;interruption.h,15 :: 		if(counterPrint >= 180) {                                                  // Verifica um determinado numero de varreduras de colunas
0x0029	0x30B4      	MOVLW      180
0x002A	0x0222      	SUBWF      _counterPrint, 0
0x002B	0x1C03      	BTFSS      STATUS, 0
0x002C	0x28AA      	GOTO       L_interrupt49
;interruption.h,17 :: 		for(counterFor = 0; counterFor < 10; counterFor++) {                  // Executa o bloco de alterações 10 vezes para modificiar as 10 colunas
0x002D	0x01B7      	CLRF       _counterFor
L_interrupt50:
0x002E	0x300A      	MOVLW      10
0x002F	0x0237      	SUBWF      _counterFor, 0
0x0030	0x1803      	BTFSC      STATUS, 0
0x0031	0x289E      	GOTO       L_interrupt51
;interruption.h,19 :: 		switch(statusPrint) {                                            // Status atual: 0-Impressao Estatica | 1-Subindo | 2-Descendo
0x0032	0x2890      	GOTO       L_interrupt53
;interruption.h,20 :: 		case 0:
L_interrupt55:
;interruption.h,21 :: 		break;
0x0033	0x289C      	GOTO       L_interrupt54
;interruption.h,22 :: 		case 1:
L_interrupt56:
;interruption.h,23 :: 		characterVetor[counterFor]    = (characterVetor[counterFor] << 1);     // Desloca a coluna principal para a esquerda
0x0034	0x0837      	MOVF       _counterFor, 0
0x0035	0x3E24      	ADDLW      _characterVetor
0x0036	0x00F3      	MOVWF      R3
0x0037	0x0873      	MOVF       R3, 0
0x0038	0x0084      	MOVWF      FSR
0x0039	0x0800      	MOVF       INDF, 0
0x003A	0x00F2      	MOVWF      R2
0x003B	0x0872      	MOVF       R2, 0
0x003C	0x00F0      	MOVWF      R0
0x003D	0x0DF0      	RLF        R0, 1
0x003E	0x1070      	BCF        R0, 0
0x003F	0x0873      	MOVF       R3, 0
0x0040	0x0084      	MOVWF      FSR
0x0041	0x0870      	MOVF       R0, 0
0x0042	0x0080      	MOVWF      INDF
;interruption.h,24 :: 		characterVetor[counterFor].f0 = (characterVetorAux[counterFor].f7);    // Ocupa o espaço vazio que ficou na coluna principal após o deslocamento
0x0043	0x0837      	MOVF       _counterFor, 0
0x0044	0x3E24      	ADDLW      _characterVetor
0x0045	0x00F1      	MOVWF      R1
0x0046	0x0837      	MOVF       _counterFor, 0
0x0047	0x3E38      	ADDLW      _characterVetorAux
0x0048	0x0084      	MOVWF      FSR
0x0049	0x0800      	MOVF       INDF, 0
0x004A	0x00F0      	MOVWF      R0
0x004B	0x0871      	MOVF       R1, 0
0x004C	0x0084      	MOVWF      FSR
0x004D	0x1BF0      	BTFSC      R0, 7
0x004E	0x2851      	GOTO       L__interrupt87
0x004F	0x1000      	BCF        INDF, 0
0x0050	0x2852      	GOTO       L__interrupt88
L__interrupt87:
0x0051	0x1400      	BSF        INDF, 0
L__interrupt88:
;interruption.h,25 :: 		characterVetorAux[counterFor] = (characterVetorAux[counterFor] << 1);  // Desloca a coluna auxiliar para acompanhar a proxima alteração
0x0052	0x0837      	MOVF       _counterFor, 0
0x0053	0x3E38      	ADDLW      _characterVetorAux
0x0054	0x00F3      	MOVWF      R3
0x0055	0x0873      	MOVF       R3, 0
0x0056	0x0084      	MOVWF      FSR
0x0057	0x0800      	MOVF       INDF, 0
0x0058	0x00F2      	MOVWF      R2
0x0059	0x0872      	MOVF       R2, 0
0x005A	0x00F0      	MOVWF      R0
0x005B	0x0DF0      	RLF        R0, 1
0x005C	0x1070      	BCF        R0, 0
0x005D	0x0873      	MOVF       R3, 0
0x005E	0x0084      	MOVWF      FSR
0x005F	0x0870      	MOVF       R0, 0
0x0060	0x0080      	MOVWF      INDF
;interruption.h,26 :: 		break;
0x0061	0x289C      	GOTO       L_interrupt54
;interruption.h,27 :: 		case 2:
L_interrupt57:
;interruption.h,28 :: 		characterVetor[counterFor]    = (characterVetor[counterFor] >> 1);     // Desloca a coluna principal para a direita
0x0062	0x0837      	MOVF       _counterFor, 0
0x0063	0x3E24      	ADDLW      _characterVetor
0x0064	0x00F3      	MOVWF      R3
0x0065	0x0873      	MOVF       R3, 0
0x0066	0x0084      	MOVWF      FSR
0x0067	0x0800      	MOVF       INDF, 0
0x0068	0x00F2      	MOVWF      R2
0x0069	0x0872      	MOVF       R2, 0
0x006A	0x00F0      	MOVWF      R0
0x006B	0x0CF0      	RRF        R0, 1
0x006C	0x13F0      	BCF        R0, 7
0x006D	0x0873      	MOVF       R3, 0
0x006E	0x0084      	MOVWF      FSR
0x006F	0x0870      	MOVF       R0, 0
0x0070	0x0080      	MOVWF      INDF
;interruption.h,29 :: 		characterVetor[counterFor].f7 = (characterVetorAux[counterFor].f0);    // Ocupa o espaço vazio que ficou na coluna principal após o deslocamento
0x0071	0x0837      	MOVF       _counterFor, 0
0x0072	0x3E24      	ADDLW      _characterVetor
0x0073	0x00F1      	MOVWF      R1
0x0074	0x0837      	MOVF       _counterFor, 0
0x0075	0x3E38      	ADDLW      _characterVetorAux
0x0076	0x0084      	MOVWF      FSR
0x0077	0x0800      	MOVF       INDF, 0
0x0078	0x00F0      	MOVWF      R0
0x0079	0x0871      	MOVF       R1, 0
0x007A	0x0084      	MOVWF      FSR
0x007B	0x1870      	BTFSC      R0, 0
0x007C	0x287F      	GOTO       L__interrupt89
0x007D	0x1380      	BCF        INDF, 7
0x007E	0x2880      	GOTO       L__interrupt90
L__interrupt89:
0x007F	0x1780      	BSF        INDF, 7
L__interrupt90:
;interruption.h,30 :: 		characterVetorAux[counterFor] = (characterVetorAux[counterFor] >> 1);  // Desloca a coluna auxiliar para acompanhar a proxima alteração
0x0080	0x0837      	MOVF       _counterFor, 0
0x0081	0x3E38      	ADDLW      _characterVetorAux
0x0082	0x00F3      	MOVWF      R3
0x0083	0x0873      	MOVF       R3, 0
0x0084	0x0084      	MOVWF      FSR
0x0085	0x0800      	MOVF       INDF, 0
0x0086	0x00F2      	MOVWF      R2
0x0087	0x0872      	MOVF       R2, 0
0x0088	0x00F0      	MOVWF      R0
0x0089	0x0CF0      	RRF        R0, 1
0x008A	0x13F0      	BCF        R0, 7
0x008B	0x0873      	MOVF       R3, 0
0x008C	0x0084      	MOVWF      FSR
0x008D	0x0870      	MOVF       R0, 0
0x008E	0x0080      	MOVWF      INDF
;interruption.h,31 :: 		break;
0x008F	0x289C      	GOTO       L_interrupt54
;interruption.h,32 :: 		}
L_interrupt53:
0x0090	0x0844      	MOVF       _statusPrint, 0
0x0091	0x3A00      	XORLW      0
0x0092	0x1903      	BTFSC      STATUS, 2
0x0093	0x2833      	GOTO       L_interrupt55
0x0094	0x0844      	MOVF       _statusPrint, 0
0x0095	0x3A01      	XORLW      1
0x0096	0x1903      	BTFSC      STATUS, 2
0x0097	0x2834      	GOTO       L_interrupt56
0x0098	0x0844      	MOVF       _statusPrint, 0
0x0099	0x3A02      	XORLW      2
0x009A	0x1903      	BTFSC      STATUS, 2
0x009B	0x2862      	GOTO       L_interrupt57
L_interrupt54:
;interruption.h,17 :: 		for(counterFor = 0; counterFor < 10; counterFor++) {                  // Executa o bloco de alterações 10 vezes para modificiar as 10 colunas
0x009C	0x0AB7      	INCF       _counterFor, 1
;interruption.h,34 :: 		}
0x009D	0x282E      	GOTO       L_interrupt50
L_interrupt51:
;interruption.h,35 :: 		counterPrint = 0;                                                     // Zera a varredura de colunas
0x009E	0x01A2      	CLRF       _counterPrint
;interruption.h,36 :: 		counterEmptyColumn++;                                                 // Incrementa o esvaziamento do vetor auxiliar
0x009F	0x0AAE      	INCF       _counterEmptyColumn, 1
;interruption.h,38 :: 		if(counterEmptyColumn >= 8) {                                         // Verifica o esvaziamento do vetor auxiliar. Para aumentar o espaçamento entre os caracteres verticalmente basta aumentar este numero
0x00A0	0x3008      	MOVLW      8
0x00A1	0x022E      	SUBWF      _counterEmptyColumn, 0
0x00A2	0x1C03      	BTFSS      STATUS, 0
0x00A3	0x28AA      	GOTO       L_interrupt58
;interruption.h,51 :: 		loadVetor(character_1, character_2);                             // Carrega o vetor auxiliar
0x00A4	0x0848      	MOVF       _character_1, 0
0x00A5	0x00CB      	MOVWF      FARG_loadVetor_character_1
0x00A6	0x0845      	MOVF       _character_2, 0
0x00A7	0x00CC      	MOVWF      FARG_loadVetor_character_2
0x00A8	0x2221      	CALL       _loadVetor
;interruption.h,53 :: 		counterEmptyColumn = 0;                                          // Seta o vetor auxiliar como cheio
0x00A9	0x01AE      	CLRF       _counterEmptyColumn
;interruption.h,54 :: 		}
L_interrupt58:
;interruption.h,55 :: 		}
L_interrupt49:
;interruption.h,57 :: 		PIR1.TMR2IF = 0;                                                           // Termina a execução do Timer2
0x00AA	0x108C      	BCF        PIR1, 1
;interruption.h,58 :: 		}
L_end_interrupt:
L__interrupt86:
0x00AB	0x0820      	MOVF       32, 0
0x00AC	0x0084      	MOVWF      FSR
0x00AD	0x084A      	MOVF       ___savePCLATH, 0
0x00AE	0x008A      	MOVWF      PCLATH
0x00AF	0x0E49      	SWAPF      ___saveSTATUS, 0
0x00B0	0x0083      	MOVWF      STATUS
0x00B1	0x0EFF      	SWAPF      R15, 1
0x00B2	0x0E7F      	SWAPF      R15, 0
0x00B3	0x0009      	RETFIE
; end of _interrupt
_switchCharacter:
;functions.h,107 :: 		void switchCharacter(int position, char character) {                            // Recebe a posicao do vetor auxiliar um caracter. Após a busca nos defines, completa aquela posicao com o caracter desejado
;functions.h,109 :: 		for(counterFor = 0; counterFor < 4; counterFor++) {                        // Realiza o procedimento nas quatro colunas do caracter escolhido
0x00B4	0x1283      	BCF        STATUS, 5
0x00B5	0x1303      	BCF        STATUS, 6
0x00B6	0x01B7      	CLRF       _counterFor
L_switchCharacter35:
0x00B7	0x3004      	MOVLW      4
0x00B8	0x0237      	SUBWF      _counterFor, 0
0x00B9	0x1803      	BTFSC      STATUS, 0
0x00BA	0x28E3      	GOTO       L_switchCharacter36
;functions.h,111 :: 		switch(character) {                                                   // Busca nos defines pelo caracter
0x00BB	0x28D6      	GOTO       L_switchCharacter38
;functions.h,112 :: 		case 'A':
L_switchCharacter40:
;functions.h,113 :: 		characterVetorAux[position] = _A[counterFor];               // Preenche no vetor na posicao escolhida
0x00BC	0x084D      	MOVF       FARG_switchCharacter_position, 0
0x00BD	0x3E38      	ADDLW      _characterVetorAux
0x00BE	0x00F1      	MOVWF      R1
0x00BF	0x0837      	MOVF       _counterFor, 0
0x00C0	0x3E2F      	ADDLW      __A
0x00C1	0x0084      	MOVWF      FSR
0x00C2	0x0800      	MOVF       INDF, 0
0x00C3	0x00F0      	MOVWF      R0
0x00C4	0x0871      	MOVF       R1, 0
0x00C5	0x0084      	MOVWF      FSR
0x00C6	0x0870      	MOVF       R0, 0
0x00C7	0x0080      	MOVWF      INDF
;functions.h,114 :: 		break;
0x00C8	0x28DE      	GOTO       L_switchCharacter39
;functions.h,115 :: 		case '2':
L_switchCharacter41:
;functions.h,116 :: 		characterVetorAux[position] = _2[counterFor];
0x00C9	0x084D      	MOVF       FARG_switchCharacter_position, 0
0x00CA	0x3E38      	ADDLW      _characterVetorAux
0x00CB	0x00F1      	MOVWF      R1
0x00CC	0x0837      	MOVF       _counterFor, 0
0x00CD	0x3E33      	ADDLW      __2
0x00CE	0x0084      	MOVWF      FSR
0x00CF	0x0800      	MOVF       INDF, 0
0x00D0	0x00F0      	MOVWF      R0
0x00D1	0x0871      	MOVF       R1, 0
0x00D2	0x0084      	MOVWF      FSR
0x00D3	0x0870      	MOVF       R0, 0
0x00D4	0x0080      	MOVWF      INDF
;functions.h,117 :: 		break;
0x00D5	0x28DE      	GOTO       L_switchCharacter39
;functions.h,118 :: 		}
L_switchCharacter38:
0x00D6	0x084F      	MOVF       FARG_switchCharacter_character, 0
0x00D7	0x3A41      	XORLW      65
0x00D8	0x1903      	BTFSC      STATUS, 2
0x00D9	0x28BC      	GOTO       L_switchCharacter40
0x00DA	0x084F      	MOVF       FARG_switchCharacter_character, 0
0x00DB	0x3A32      	XORLW      50
0x00DC	0x1903      	BTFSC      STATUS, 2
0x00DD	0x28C9      	GOTO       L_switchCharacter41
L_switchCharacter39:
;functions.h,119 :: 		position++;                                                           // Avança a proxima posicao no vetor auxiliar
0x00DE	0x0ACD      	INCF       FARG_switchCharacter_position, 1
0x00DF	0x1903      	BTFSC      STATUS, 2
0x00E0	0x0ACE      	INCF       FARG_switchCharacter_position+1, 1
;functions.h,109 :: 		for(counterFor = 0; counterFor < 4; counterFor++) {                        // Realiza o procedimento nas quatro colunas do caracter escolhido
0x00E1	0x0AB7      	INCF       _counterFor, 1
;functions.h,120 :: 		}
0x00E2	0x28B7      	GOTO       L_switchCharacter35
L_switchCharacter36:
;functions.h,121 :: 		}
L_end_switchCharacter:
0x00E3	0x0008      	RETURN
; end of _switchCharacter
_verifyBit:
;functions.h,72 :: 		int verifyBit(char character, char position) {                                  // Recebe um caracter e uma posição de 0 a 7 e retorna o bit do caracter na posicao solicitada
;functions.h,74 :: 		switch(position) {
0x00E4	0x2911      	GOTO       L_verifyBit22
;functions.h,75 :: 		case 1:
L_verifyBit24:
;functions.h,76 :: 		return character.f1;
0x00E5	0x3000      	MOVLW      0
0x00E6	0x1283      	BCF        STATUS, 5
0x00E7	0x1303      	BCF        STATUS, 6
0x00E8	0x18CD      	BTFSC      FARG_verifyBit_character, 1
0x00E9	0x3001      	MOVLW      1
0x00EA	0x00F0      	MOVWF      R0
0x00EB	0x01F1      	CLRF       R0+1
0x00EC	0x292F      	GOTO       L_end_verifyBit
;functions.h,78 :: 		case 2:
L_verifyBit25:
;functions.h,79 :: 		return character.f2;
0x00ED	0x3000      	MOVLW      0
0x00EE	0x194D      	BTFSC      FARG_verifyBit_character, 2
0x00EF	0x3001      	MOVLW      1
0x00F0	0x00F0      	MOVWF      R0
0x00F1	0x01F1      	CLRF       R0+1
0x00F2	0x292F      	GOTO       L_end_verifyBit
;functions.h,81 :: 		case 3:
L_verifyBit26:
;functions.h,82 :: 		return character.f3;
0x00F3	0x3000      	MOVLW      0
0x00F4	0x19CD      	BTFSC      FARG_verifyBit_character, 3
0x00F5	0x3001      	MOVLW      1
0x00F6	0x00F0      	MOVWF      R0
0x00F7	0x01F1      	CLRF       R0+1
0x00F8	0x292F      	GOTO       L_end_verifyBit
;functions.h,84 :: 		case 4:
L_verifyBit27:
;functions.h,85 :: 		return character.f4;
0x00F9	0x3000      	MOVLW      0
0x00FA	0x1A4D      	BTFSC      FARG_verifyBit_character, 4
0x00FB	0x3001      	MOVLW      1
0x00FC	0x00F0      	MOVWF      R0
0x00FD	0x01F1      	CLRF       R0+1
0x00FE	0x292F      	GOTO       L_end_verifyBit
;functions.h,87 :: 		case 5:
L_verifyBit28:
;functions.h,88 :: 		return character.f5;
0x00FF	0x3000      	MOVLW      0
0x0100	0x1ACD      	BTFSC      FARG_verifyBit_character, 5
0x0101	0x3001      	MOVLW      1
0x0102	0x00F0      	MOVWF      R0
0x0103	0x01F1      	CLRF       R0+1
0x0104	0x292F      	GOTO       L_end_verifyBit
;functions.h,90 :: 		case 6:
L_verifyBit29:
;functions.h,91 :: 		return character.f6;
0x0105	0x3000      	MOVLW      0
0x0106	0x1B4D      	BTFSC      FARG_verifyBit_character, 6
0x0107	0x3001      	MOVLW      1
0x0108	0x00F0      	MOVWF      R0
0x0109	0x01F1      	CLRF       R0+1
0x010A	0x292F      	GOTO       L_end_verifyBit
;functions.h,93 :: 		case 7:
L_verifyBit30:
;functions.h,94 :: 		return character.f7;
0x010B	0x3000      	MOVLW      0
0x010C	0x1BCD      	BTFSC      FARG_verifyBit_character, 7
0x010D	0x3001      	MOVLW      1
0x010E	0x00F0      	MOVWF      R0
0x010F	0x01F1      	CLRF       R0+1
0x0110	0x292F      	GOTO       L_end_verifyBit
;functions.h,96 :: 		}
L_verifyBit22:
0x0111	0x1283      	BCF        STATUS, 5
0x0112	0x1303      	BCF        STATUS, 6
0x0113	0x084E      	MOVF       FARG_verifyBit_position, 0
0x0114	0x3A01      	XORLW      1
0x0115	0x1903      	BTFSC      STATUS, 2
0x0116	0x28E5      	GOTO       L_verifyBit24
0x0117	0x084E      	MOVF       FARG_verifyBit_position, 0
0x0118	0x3A02      	XORLW      2
0x0119	0x1903      	BTFSC      STATUS, 2
0x011A	0x28ED      	GOTO       L_verifyBit25
0x011B	0x084E      	MOVF       FARG_verifyBit_position, 0
0x011C	0x3A03      	XORLW      3
0x011D	0x1903      	BTFSC      STATUS, 2
0x011E	0x28F3      	GOTO       L_verifyBit26
0x011F	0x084E      	MOVF       FARG_verifyBit_position, 0
0x0120	0x3A04      	XORLW      4
0x0121	0x1903      	BTFSC      STATUS, 2
0x0122	0x28F9      	GOTO       L_verifyBit27
0x0123	0x084E      	MOVF       FARG_verifyBit_position, 0
0x0124	0x3A05      	XORLW      5
0x0125	0x1903      	BTFSC      STATUS, 2
0x0126	0x28FF      	GOTO       L_verifyBit28
0x0127	0x084E      	MOVF       FARG_verifyBit_position, 0
0x0128	0x3A06      	XORLW      6
0x0129	0x1903      	BTFSC      STATUS, 2
0x012A	0x2905      	GOTO       L_verifyBit29
0x012B	0x084E      	MOVF       FARG_verifyBit_position, 0
0x012C	0x3A07      	XORLW      7
0x012D	0x1903      	BTFSC      STATUS, 2
0x012E	0x290B      	GOTO       L_verifyBit30
;functions.h,97 :: 		}
L_end_verifyBit:
0x012F	0x0008      	RETURN
; end of _verifyBit
_lightLine:
;functions.h,45 :: 		void lightLine(int line) {                                                      // Liga a linha passada por parametro
;functions.h,47 :: 		switch(line) {
0x0130	0x2941      	GOTO       L_lightLine13
;functions.h,48 :: 		case 1:
L_lightLine15:
;functions.h,49 :: 		on_line_7;
0x0131	0x1283      	BCF        STATUS, 5
0x0132	0x1303      	BCF        STATUS, 6
0x0133	0x1506      	BSF        PORTB, 2
;functions.h,50 :: 		break;
0x0134	0x297B      	GOTO       L_lightLine14
;functions.h,51 :: 		case 2:
L_lightLine16:
;functions.h,52 :: 		on_line_6;
0x0135	0x1486      	BSF        PORTB, 1
;functions.h,53 :: 		break;
0x0136	0x297B      	GOTO       L_lightLine14
;functions.h,54 :: 		case 3:
L_lightLine17:
;functions.h,55 :: 		on_line_5;
0x0137	0x1686      	BSF        PORTB, 5
;functions.h,56 :: 		break;
0x0138	0x297B      	GOTO       L_lightLine14
;functions.h,57 :: 		case 4:
L_lightLine18:
;functions.h,58 :: 		on_line_4;
0x0139	0x1505      	BSF        PORTA, 2
;functions.h,59 :: 		break;
0x013A	0x297B      	GOTO       L_lightLine14
;functions.h,60 :: 		case 5:
L_lightLine19:
;functions.h,61 :: 		on_line_3;
0x013B	0x1705      	BSF        PORTA, 6
;functions.h,62 :: 		break;
0x013C	0x297B      	GOTO       L_lightLine14
;functions.h,63 :: 		case 6:
L_lightLine20:
;functions.h,64 :: 		on_line_2;
0x013D	0x1405      	BSF        PORTA, 0
;functions.h,65 :: 		break;
0x013E	0x297B      	GOTO       L_lightLine14
;functions.h,66 :: 		case 7:
L_lightLine21:
;functions.h,67 :: 		on_line_1;
0x013F	0x1785      	BSF        PORTA, 7
;functions.h,68 :: 		break;
0x0140	0x297B      	GOTO       L_lightLine14
;functions.h,69 :: 		}
L_lightLine13:
0x0141	0x1283      	BCF        STATUS, 5
0x0142	0x1303      	BCF        STATUS, 6
0x0143	0x3000      	MOVLW      0
0x0144	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x0145	0x1D03      	BTFSS      STATUS, 2
0x0146	0x2949      	GOTO       L__lightLine74
0x0147	0x3001      	MOVLW      1
0x0148	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine74:
0x0149	0x1903      	BTFSC      STATUS, 2
0x014A	0x2931      	GOTO       L_lightLine15
0x014B	0x3000      	MOVLW      0
0x014C	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x014D	0x1D03      	BTFSS      STATUS, 2
0x014E	0x2951      	GOTO       L__lightLine75
0x014F	0x3002      	MOVLW      2
0x0150	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine75:
0x0151	0x1903      	BTFSC      STATUS, 2
0x0152	0x2935      	GOTO       L_lightLine16
0x0153	0x3000      	MOVLW      0
0x0154	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x0155	0x1D03      	BTFSS      STATUS, 2
0x0156	0x2959      	GOTO       L__lightLine76
0x0157	0x3003      	MOVLW      3
0x0158	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine76:
0x0159	0x1903      	BTFSC      STATUS, 2
0x015A	0x2937      	GOTO       L_lightLine17
0x015B	0x3000      	MOVLW      0
0x015C	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x015D	0x1D03      	BTFSS      STATUS, 2
0x015E	0x2961      	GOTO       L__lightLine77
0x015F	0x3004      	MOVLW      4
0x0160	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine77:
0x0161	0x1903      	BTFSC      STATUS, 2
0x0162	0x2939      	GOTO       L_lightLine18
0x0163	0x3000      	MOVLW      0
0x0164	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x0165	0x1D03      	BTFSS      STATUS, 2
0x0166	0x2969      	GOTO       L__lightLine78
0x0167	0x3005      	MOVLW      5
0x0168	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine78:
0x0169	0x1903      	BTFSC      STATUS, 2
0x016A	0x293B      	GOTO       L_lightLine19
0x016B	0x3000      	MOVLW      0
0x016C	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x016D	0x1D03      	BTFSS      STATUS, 2
0x016E	0x2971      	GOTO       L__lightLine79
0x016F	0x3006      	MOVLW      6
0x0170	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine79:
0x0171	0x1903      	BTFSC      STATUS, 2
0x0172	0x293D      	GOTO       L_lightLine20
0x0173	0x3000      	MOVLW      0
0x0174	0x064E      	XORWF      FARG_lightLine_line+1, 0
0x0175	0x1D03      	BTFSS      STATUS, 2
0x0176	0x2979      	GOTO       L__lightLine80
0x0177	0x3007      	MOVLW      7
0x0178	0x064D      	XORWF      FARG_lightLine_line, 0
L__lightLine80:
0x0179	0x1903      	BTFSC      STATUS, 2
0x017A	0x293F      	GOTO       L_lightLine21
L_lightLine14:
;functions.h,70 :: 		}
L_end_lightLine:
0x017B	0x0008      	RETURN
; end of _lightLine
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x017C	0x1283      	BCF        STATUS, 5
0x017D	0x1303      	BCF        STATUS, 6
0x017E	0x0843      	MOVF       ___DoICPAddr+1, 0
0x017F	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0180	0x0842      	MOVF       ___DoICPAddr, 0
0x0181	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0182	0x0008      	RETURN
; end of _____DoICP
_initialSetup:
;defines.h,60 :: 		void initialSetup() {
;defines.h,61 :: 		ANSEL = 0; ANSELH = 0;
0x0183	0x1683      	BSF        STATUS, 5
0x0184	0x1703      	BSF        STATUS, 6
0x0185	0x0188      	CLRF       ANSEL
0x0186	0x0189      	CLRF       ANSELH
;defines.h,63 :: 		C1ON_BIT = 0; C2ON_BIT = 0;
0x0187	0x1283      	BCF        STATUS, 5
0x0188	0x1387      	BCF        C1ON_bit, BitPos(C1ON_bit+0)
0x0189	0x1388      	BCF        C2ON_bit, BitPos(C2ON_bit+0)
;defines.h,65 :: 		TRISA = 0b00010000;
0x018A	0x3010      	MOVLW      16
0x018B	0x1683      	BSF        STATUS, 5
0x018C	0x1303      	BCF        STATUS, 6
0x018D	0x0085      	MOVWF      TRISA
;defines.h,66 :: 		TRISB = 0b11000000;
0x018E	0x30C0      	MOVLW      192
0x018F	0x0086      	MOVWF      TRISB
;defines.h,67 :: 		TRISC = 0b11011000;
0x0190	0x30D8      	MOVLW      216
0x0191	0x0087      	MOVWF      TRISC
;defines.h,69 :: 		WPUB   = 0b11000000; ADCON1  = 0b00001111;
0x0192	0x30C0      	MOVLW      192
0x0193	0x0095      	MOVWF      WPUB
0x0194	0x300F      	MOVLW      15
0x0195	0x009F      	MOVWF      ADCON1
;defines.h,70 :: 		OSCCON = 0b01110100; OSCTUNE = 0b00000000;
0x0196	0x3074      	MOVLW      116
0x0197	0x008F      	MOVWF      OSCCON
0x0198	0x0190      	CLRF       OSCTUNE
;defines.h,72 :: 		OPTION_REG = 0b00001111;
0x0199	0x300F      	MOVLW      15
0x019A	0x0081      	MOVWF      OPTION_REG
;defines.h,73 :: 		INTCON = 0b11000000;
0x019B	0x30C0      	MOVLW      192
0x019C	0x008B      	MOVWF      INTCON
;defines.h,75 :: 		PIE1.TMR2IE = 1;
0x019D	0x148C      	BSF        PIE1, 1
;defines.h,76 :: 		T2CON = 0b00000101;
0x019E	0x3005      	MOVLW      5
0x019F	0x1283      	BCF        STATUS, 5
0x01A0	0x0092      	MOVWF      T2CON
;defines.h,77 :: 		}
L_end_initialSetup:
0x01A1	0x0008      	RETURN
; end of _initialSetup
_setColumn:
;functions.h,1 :: 		void setColumn(int column) {
;functions.h,3 :: 		PORTA |= 0b00101010;                                                       // Desliga todas as colunas
0x01A2	0x302A      	MOVLW      42
0x01A3	0x1283      	BCF        STATUS, 5
0x01A4	0x1303      	BCF        STATUS, 6
0x01A5	0x0485      	IORWF      PORTA, 1
;functions.h,4 :: 		PORTB |= 0b00011001;                                                       // Desliga todas as colunas
0x01A6	0x3019      	MOVLW      25
0x01A7	0x0486      	IORWF      PORTB, 1
;functions.h,5 :: 		PORTC |= 0b00100111;                                                       // Desliga todas as colunas
0x01A8	0x3027      	MOVLW      39
0x01A9	0x0487      	IORWF      PORTC, 1
;functions.h,7 :: 		PORTA &= 0b00111010;                                                       // Desliga todas as linhas
0x01AA	0x303A      	MOVLW      58
0x01AB	0x0585      	ANDWF      PORTA, 1
;functions.h,8 :: 		PORTB &= 0b11011001;                                                       // Desliga todas as linhas
0x01AC	0x30D9      	MOVLW      217
0x01AD	0x0586      	ANDWF      PORTB, 1
;functions.h,10 :: 		switch(column) {                                                           // Liga a coluna passada por parametro
0x01AE	0x29C3      	GOTO       L_setColumn0
;functions.h,11 :: 		case 1:
L_setColumn2:
;functions.h,12 :: 		on_column_1;
0x01AF	0x1085      	BCF        PORTA, 1
;functions.h,13 :: 		break;
0x01B0	0x2A14      	GOTO       L_setColumn1
;functions.h,14 :: 		case 2:
L_setColumn3:
;functions.h,15 :: 		on_column_2;
0x01B1	0x1186      	BCF        PORTB, 3
;functions.h,16 :: 		break;
0x01B2	0x2A14      	GOTO       L_setColumn1
;functions.h,17 :: 		case 3:
L_setColumn4:
;functions.h,18 :: 		on_column_3;
0x01B3	0x1185      	BCF        PORTA, 3
;functions.h,19 :: 		break;
0x01B4	0x2A14      	GOTO       L_setColumn1
;functions.h,20 :: 		case 4:
L_setColumn5:
;functions.h,21 :: 		on_column_4;
0x01B5	0x1285      	BCF        PORTA, 5
;functions.h,22 :: 		break;
0x01B6	0x2A14      	GOTO       L_setColumn1
;functions.h,23 :: 		case 5:
L_setColumn6:
;functions.h,24 :: 		on_column_5;
0x01B7	0x1206      	BCF        PORTB, 4
;functions.h,25 :: 		break;
0x01B8	0x2A14      	GOTO       L_setColumn1
;functions.h,26 :: 		case 6:
L_setColumn7:
;functions.h,27 :: 		on_column_6;
0x01B9	0x1007      	BCF        PORTC, 0
;functions.h,28 :: 		break;
0x01BA	0x2A14      	GOTO       L_setColumn1
;functions.h,29 :: 		case 7:
L_setColumn8:
;functions.h,30 :: 		on_column_7;
0x01BB	0x1287      	BCF        PORTC, 5
;functions.h,31 :: 		break;
0x01BC	0x2A14      	GOTO       L_setColumn1
;functions.h,32 :: 		case 8:
L_setColumn9:
;functions.h,33 :: 		on_column_8;
0x01BD	0x1087      	BCF        PORTC, 1
;functions.h,34 :: 		break;
0x01BE	0x2A14      	GOTO       L_setColumn1
;functions.h,35 :: 		case 9:
L_setColumn10:
;functions.h,36 :: 		on_column_9;
0x01BF	0x1107      	BCF        PORTC, 2
;functions.h,37 :: 		break;
0x01C0	0x2A14      	GOTO       L_setColumn1
;functions.h,38 :: 		case 10:
L_setColumn11:
;functions.h,39 :: 		on_column_10;
0x01C1	0x1006      	BCF        PORTB, 0
;functions.h,40 :: 		default:
L_setColumn12:
;functions.h,41 :: 		break;
0x01C2	0x2A14      	GOTO       L_setColumn1
;functions.h,42 :: 		}
L_setColumn0:
0x01C3	0x3000      	MOVLW      0
0x01C4	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01C5	0x1D03      	BTFSS      STATUS, 2
0x01C6	0x29C9      	GOTO       L__setColumn63
0x01C7	0x3001      	MOVLW      1
0x01C8	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn63:
0x01C9	0x1903      	BTFSC      STATUS, 2
0x01CA	0x29AF      	GOTO       L_setColumn2
0x01CB	0x3000      	MOVLW      0
0x01CC	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01CD	0x1D03      	BTFSS      STATUS, 2
0x01CE	0x29D1      	GOTO       L__setColumn64
0x01CF	0x3002      	MOVLW      2
0x01D0	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn64:
0x01D1	0x1903      	BTFSC      STATUS, 2
0x01D2	0x29B1      	GOTO       L_setColumn3
0x01D3	0x3000      	MOVLW      0
0x01D4	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01D5	0x1D03      	BTFSS      STATUS, 2
0x01D6	0x29D9      	GOTO       L__setColumn65
0x01D7	0x3003      	MOVLW      3
0x01D8	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn65:
0x01D9	0x1903      	BTFSC      STATUS, 2
0x01DA	0x29B3      	GOTO       L_setColumn4
0x01DB	0x3000      	MOVLW      0
0x01DC	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01DD	0x1D03      	BTFSS      STATUS, 2
0x01DE	0x29E1      	GOTO       L__setColumn66
0x01DF	0x3004      	MOVLW      4
0x01E0	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn66:
0x01E1	0x1903      	BTFSC      STATUS, 2
0x01E2	0x29B5      	GOTO       L_setColumn5
0x01E3	0x3000      	MOVLW      0
0x01E4	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01E5	0x1D03      	BTFSS      STATUS, 2
0x01E6	0x29E9      	GOTO       L__setColumn67
0x01E7	0x3005      	MOVLW      5
0x01E8	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn67:
0x01E9	0x1903      	BTFSC      STATUS, 2
0x01EA	0x29B7      	GOTO       L_setColumn6
0x01EB	0x3000      	MOVLW      0
0x01EC	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01ED	0x1D03      	BTFSS      STATUS, 2
0x01EE	0x29F1      	GOTO       L__setColumn68
0x01EF	0x3006      	MOVLW      6
0x01F0	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn68:
0x01F1	0x1903      	BTFSC      STATUS, 2
0x01F2	0x29B9      	GOTO       L_setColumn7
0x01F3	0x3000      	MOVLW      0
0x01F4	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01F5	0x1D03      	BTFSS      STATUS, 2
0x01F6	0x29F9      	GOTO       L__setColumn69
0x01F7	0x3007      	MOVLW      7
0x01F8	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn69:
0x01F9	0x1903      	BTFSC      STATUS, 2
0x01FA	0x29BB      	GOTO       L_setColumn8
0x01FB	0x3000      	MOVLW      0
0x01FC	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x01FD	0x1D03      	BTFSS      STATUS, 2
0x01FE	0x2A01      	GOTO       L__setColumn70
0x01FF	0x3008      	MOVLW      8
0x0200	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn70:
0x0201	0x1903      	BTFSC      STATUS, 2
0x0202	0x29BD      	GOTO       L_setColumn9
0x0203	0x3000      	MOVLW      0
0x0204	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x0205	0x1D03      	BTFSS      STATUS, 2
0x0206	0x2A09      	GOTO       L__setColumn71
0x0207	0x3009      	MOVLW      9
0x0208	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn71:
0x0209	0x1903      	BTFSC      STATUS, 2
0x020A	0x29BF      	GOTO       L_setColumn10
0x020B	0x3000      	MOVLW      0
0x020C	0x064C      	XORWF      FARG_setColumn_column+1, 0
0x020D	0x1D03      	BTFSS      STATUS, 2
0x020E	0x2A11      	GOTO       L__setColumn72
0x020F	0x300A      	MOVLW      10
0x0210	0x064B      	XORWF      FARG_setColumn_column, 0
L__setColumn72:
0x0211	0x1903      	BTFSC      STATUS, 2
0x0212	0x29C1      	GOTO       L_setColumn11
0x0213	0x29C2      	GOTO       L_setColumn12
L_setColumn1:
;functions.h,43 :: 		}
L_end_setColumn:
0x0214	0x0008      	RETURN
; end of _setColumn
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0215	0x217C      	CALL       _____DoICP
0x0216	0x118A      	BCF        PCLATH, 3
0x0217	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0218	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0219	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x021A	0x0AC2      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x021B	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x021C	0x0AC3      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x021D	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x021E	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x021F	0x2A15      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0220	0x0008      	RETURN
; end of ___CC2DW
_loadVetor:
;functions.h,123 :: 		void loadVetor(char character_1, char character_2) {                            // Recebe os dois caracteres e preenche o vetor auxiliar por completo
;functions.h,125 :: 		for(counterFor = 0; counterFor < 10; counterFor++) {                       // Limpa todo o vetor auxiliar
0x0221	0x1283      	BCF        STATUS, 5
0x0222	0x1303      	BCF        STATUS, 6
0x0223	0x01B7      	CLRF       _counterFor
L_loadVetor42:
0x0224	0x300A      	MOVLW      10
0x0225	0x0237      	SUBWF      _counterFor, 0
0x0226	0x1803      	BTFSC      STATUS, 0
0x0227	0x2A2E      	GOTO       L_loadVetor43
;functions.h,126 :: 		characterVetorAux[counterFor] = 0;
0x0228	0x0837      	MOVF       _counterFor, 0
0x0229	0x3E38      	ADDLW      _characterVetorAux
0x022A	0x0084      	MOVWF      FSR
0x022B	0x0180      	CLRF       INDF
;functions.h,125 :: 		for(counterFor = 0; counterFor < 10; counterFor++) {                       // Limpa todo o vetor auxiliar
0x022C	0x0AB7      	INCF       _counterFor, 1
;functions.h,127 :: 		}
0x022D	0x2A24      	GOTO       L_loadVetor42
L_loadVetor43:
;functions.h,129 :: 		if(character_1 == 0x20) {                                                  // Se o character_1 for igual a 0x20, apenas o character_2 sera impresso e o mesmo sera centralizado
0x022E	0x084B      	MOVF       FARG_loadVetor_character_1, 0
0x022F	0x3A20      	XORLW      32
0x0230	0x1D03      	BTFSS      STATUS, 2
0x0231	0x2A3A      	GOTO       L_loadVetor45
;functions.h,130 :: 		switchCharacter(3, character_2);
0x0232	0x3003      	MOVLW      3
0x0233	0x00CD      	MOVWF      FARG_switchCharacter_position
0x0234	0x3000      	MOVLW      0
0x0235	0x00CE      	MOVWF      FARG_switchCharacter_position+1
0x0236	0x084C      	MOVF       FARG_loadVetor_character_2, 0
0x0237	0x00CF      	MOVWF      FARG_switchCharacter_character
0x0238	0x20B4      	CALL       _switchCharacter
;functions.h,131 :: 		} else {                                                                   // Senao, imprime os dois caracteres
0x0239	0x2A46      	GOTO       L_loadVetor46
L_loadVetor45:
;functions.h,132 :: 		switchCharacter(0, character_1);
0x023A	0x01CD      	CLRF       FARG_switchCharacter_position
0x023B	0x01CE      	CLRF       FARG_switchCharacter_position+1
0x023C	0x084B      	MOVF       FARG_loadVetor_character_1, 0
0x023D	0x00CF      	MOVWF      FARG_switchCharacter_character
0x023E	0x20B4      	CALL       _switchCharacter
;functions.h,133 :: 		switchCharacter(5, character_2);
0x023F	0x3005      	MOVLW      5
0x0240	0x00CD      	MOVWF      FARG_switchCharacter_position
0x0241	0x3000      	MOVLW      0
0x0242	0x00CE      	MOVWF      FARG_switchCharacter_position+1
0x0243	0x084C      	MOVF       FARG_loadVetor_character_2, 0
0x0244	0x00CF      	MOVWF      FARG_switchCharacter_character
0x0245	0x20B4      	CALL       _switchCharacter
;functions.h,134 :: 		}
L_loadVetor46:
;functions.h,135 :: 		}
L_end_loadVetor:
0x0246	0x0008      	RETURN
; end of _loadVetor
_printColumn:
;functions.h,99 :: 		void printColumn(char character) {                                              // Recebe a coluna de um caracter como parametro e liga as respectivas linhas
;functions.h,101 :: 		for(counterFor = 1; counterFor < 8; counterFor++) {                        // Varre os 8 bits do caracter recebido como parametro
0x0247	0x3001      	MOVLW      1
0x0248	0x1283      	BCF        STATUS, 5
0x0249	0x1303      	BCF        STATUS, 6
0x024A	0x00B7      	MOVWF      _counterFor
L_printColumn31:
0x024B	0x3008      	MOVLW      8
0x024C	0x0237      	SUBWF      _counterFor, 0
0x024D	0x1803      	BTFSC      STATUS, 0
0x024E	0x2A5E      	GOTO       L_printColumn32
;functions.h,102 :: 		if(verifyBit(character, counterFor))                                  // Verifica se o bit atual é 1 ou 0
0x024F	0x084B      	MOVF       FARG_printColumn_character, 0
0x0250	0x00CD      	MOVWF      FARG_verifyBit_character
0x0251	0x0837      	MOVF       _counterFor, 0
0x0252	0x00CE      	MOVWF      FARG_verifyBit_position
0x0253	0x20E4      	CALL       _verifyBit
0x0254	0x0870      	MOVF       R0, 0
0x0255	0x0471      	IORWF      R0+1, 0
0x0256	0x1903      	BTFSC      STATUS, 2
0x0257	0x2A5C      	GOTO       L_printColumn34
;functions.h,103 :: 		lightLine(counterFor);                                           // Se o bit atual for 1, liga a respectiva linha
0x0258	0x0837      	MOVF       _counterFor, 0
0x0259	0x00CD      	MOVWF      FARG_lightLine_line
0x025A	0x01CE      	CLRF       FARG_lightLine_line+1
0x025B	0x2130      	CALL       _lightLine
L_printColumn34:
;functions.h,101 :: 		for(counterFor = 1; counterFor < 8; counterFor++) {                        // Varre os 8 bits do caracter recebido como parametro
0x025C	0x0AB7      	INCF       _counterFor, 1
;functions.h,104 :: 		}
0x025D	0x2A4B      	GOTO       L_printColumn31
L_printColumn32:
;functions.h,105 :: 		}
L_end_printColumn:
0x025E	0x0008      	RETURN
; end of _printColumn
_main:
0x025F	0x3001      	MOVLW      1
0x0260	0x1283      	BCF        STATUS, 5
0x0261	0x1303      	BCF        STATUS, 6
0x0262	0x00A1      	MOVWF      _currentPosition
0x0263	0x01A2      	CLRF       _counterPrint
0x0264	0x3001      	MOVLW      1
0x0265	0x00A3      	MOVWF      _currentColumn
0x0266	0x01A4      	CLRF       _characterVetor
0x0267	0x01A5      	CLRF       37
0x0268	0x01A6      	CLRF       38
0x0269	0x01A7      	CLRF       39
0x026A	0x01A8      	CLRF       40
0x026B	0x01A9      	CLRF       41
0x026C	0x01AA      	CLRF       42
0x026D	0x01AB      	CLRF       43
0x026E	0x01AC      	CLRF       44
0x026F	0x01AD      	CLRF       45
0x0270	0x01AE      	CLRF       _counterEmptyColumn
0x0271	0x307E      	MOVLW      126
0x0272	0x00AF      	MOVWF      __A
0x0273	0x3090      	MOVLW      144
0x0274	0x00B0      	MOVWF      48
0x0275	0x3090      	MOVLW      144
0x0276	0x00B1      	MOVWF      49
0x0277	0x307E      	MOVLW      126
0x0278	0x00B2      	MOVWF      50
0x0279	0x3046      	MOVLW      70
0x027A	0x00B3      	MOVWF      __2
0x027B	0x308A      	MOVLW      138
0x027C	0x00B4      	MOVWF      52
0x027D	0x3092      	MOVLW      146
0x027E	0x00B5      	MOVWF      53
0x027F	0x3062      	MOVLW      98
0x0280	0x00B6      	MOVWF      54
0x0281	0x01B7      	CLRF       _counterFor
0x0282	0x01B8      	CLRF       _characterVetorAux
0x0283	0x01B9      	CLRF       57
0x0284	0x01BA      	CLRF       58
0x0285	0x01BB      	CLRF       59
0x0286	0x01BC      	CLRF       60
0x0287	0x01BD      	CLRF       61
0x0288	0x01BE      	CLRF       62
0x0289	0x01BF      	CLRF       63
0x028A	0x01C0      	CLRF       64
0x028B	0x01C1      	CLRF       65
;DisplayIPD.c,28 :: 		void main() {
;DisplayIPD.c,29 :: 		initialSetup();                                                            // Funcao que realiza as pre configuracoes do microcontrolador
0x028C	0x2183      	CALL       _initialSetup
;DisplayIPD.c,31 :: 		character_1 = 'A';
0x028D	0x3041      	MOVLW      65
0x028E	0x00C8      	MOVWF      _character_1
;DisplayIPD.c,32 :: 		character_2 = '2';
0x028F	0x3032      	MOVLW      50
0x0290	0x00C5      	MOVWF      _character_2
;DisplayIPD.c,33 :: 		statusPrint = 1;
0x0291	0x3001      	MOVLW      1
0x0292	0x00C4      	MOVWF      _statusPrint
;DisplayIPD.c,35 :: 		nextCharacter_1 = '2';
0x0293	0x3032      	MOVLW      50
0x0294	0x00C7      	MOVWF      _nextCharacter_1
;DisplayIPD.c,36 :: 		nextCharacter_2 = 'A';
0x0295	0x3041      	MOVLW      65
0x0296	0x00C6      	MOVWF      _nextCharacter_2
;DisplayIPD.c,38 :: 		while(1) {
L_main59:
;DisplayIPD.c,39 :: 		asm {clrwdt}
0x0297	0x0064      	CLRWDT
;DisplayIPD.c,41 :: 		}
0x0298	0x2A97      	GOTO       L_main59
;DisplayIPD.c,42 :: 		}
L_end_main:
0x0299	0x2A99      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [176]    _interrupt
0x00B4      [48]    _switchCharacter
0x00E4      [76]    _verifyBit
0x0130      [76]    _lightLine
0x017C       [7]    _____DoICP
0x0183      [31]    _initialSetup
0x01A2     [115]    _setColumn
0x0215      [12]    ___CC2DW
0x0221      [38]    _loadVetor
0x0247      [24]    _printColumn
0x025F      [59]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0012       [1]    T2CON
0x0021       [1]    _currentPosition
0x0022       [1]    _counterPrint
0x0023       [1]    _currentColumn
0x0024      [10]    _characterVetor
0x002E       [1]    _counterEmptyColumn
0x002F       [4]    __A
0x0033       [4]    __2
0x0037       [1]    _counterFor
0x0038      [10]    _characterVetorAux
0x0042       [2]    ___DoICPAddr
0x0044       [1]    _statusPrint
0x0045       [1]    _character_2
0x0046       [1]    _nextCharacter_2
0x0047       [1]    _nextCharacter_1
0x0048       [1]    _character_1
0x0049       [1]    ___saveSTATUS
0x004A       [1]    ___savePCLATH
0x004B       [2]    FARG_setColumn_column
0x004B       [1]    FARG_printColumn_character
0x004B       [1]    FARG_loadVetor_character_1
0x004C       [1]    FARG_loadVetor_character_2
0x004D       [2]    FARG_lightLine_line
0x004D       [1]    FARG_verifyBit_character
0x004D       [2]    FARG_switchCharacter_position
0x004E       [1]    FARG_verifyBit_position
0x004F       [1]    FARG_switchCharacter_character
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x008C       [1]    PIE1
0x008F       [1]    OSCCON
0x0090       [1]    OSCTUNE
0x0095       [1]    WPUB
0x009F       [1]    ADCON1
0x0107       [0]    C1ON_bit
0x0108       [0]    C2ON_bit
0x0188       [1]    ANSEL
0x0189       [1]    ANSELH
